@startuml UML
skinparam classAttributeIconSize 0

' generic class for an experimenter
' note that experiments will likely be stored by user id instead of by all experiment info
' We could do hasing, but it's probably easier for now (for the UML sake) to represent this as a collection of experiments
class Experimenter {
    -userId: Integer
    -info: ContactInformation
    -controller: SearchController
    -ownedExperiments: Collection<Experiment>
    -participatingExperiments: Collection<Experiment>
    -addGeoLocation(exp: Experiment): Location
    -seeGeoLocation(experiments: Collection<Experiment>): Map
}


' ??? (should be attribute if status changes per experiment, stay as class if a profile is either owner or experimenter)
class Owner extends Experimenter {
  +isLocationRequired(exp: Experiment): Boolean
}

' ??? (should be attribute if status changes per experiment, stay as class if a profile is either owner or experimenter)
class CrowdExperimenter extends Experiment {
}

' what information does a subscription hold? an experiment & list of users subscribed? currently assumes all subscribers are experimenters of some kind
class Subscription {
    experiment: Experiment
    subscribed: Collection<Experimenter>
}

class Question {
    -question: String
    -user: Experimenter
    -reply: Collection<Reply>
    +getQuestion(): String
    +getThread(): Collection<String>
}

' assume that anyone who can reply to a question is a type of experimenter
class Reply {
    -reply: String
    -user: Experimenter
}

' allows the experiment to enforce only one trial type
enum ExperimentType {
    Count
    NaturalCount
    Binomial
    Measurement
}

' right now will just look for owner based on their id
' idea: make this 'experimentInfo' and give every type of experiment an experimentInfo instead
' rational: for displaying info and searching we don't need the results, just the info
' both are implemented so whichever we don't use can just be deleted
class Experiment {
    -experimentId: Integer
    -description: String
    -minTrials: Integer
    ' this is the userId of the owner
    -owner: Integer
    -type: ExperimentType
    -crowdExperimenters: Collection<Integer>
    +getExperimentId(id: int): Experiment
}



class CountExperiment extends Experiment {
    -results: Collection<CountTrial>
    +getExperimentId(id: int): Experiment
    -recordResult(result: int)
    generateHistogram(Collection<Trial>): Image
    generatePlot(Collection<Trial>): Image
}

class NaturalCountExperiment extends Experiment {
    -results: Collection<NaturalCountTrial>
    +getExperimentId(id: int): Experiment
    -recordResult(result: int)
    generateHistogram(Collection<Trial>): Image
    generatePlot(Collection<Trial>): Image
}

class BinomialExperiment extends Experiment {
    -results: Collection<BinomialTrial>
    +getExperimentId(id: int): Experiment
    -recordResult(result: boolean)
    generateHistogram(Collection<Trial>): Image
    generatePlot(Collection<Trial>): Image
}

class MeasurementExperiment extends Experiment {
    -results: Collection<MeasurementTrial>
    +getExperimentId(id: int): Experiment
    -recordResult(result: float)
    -removeResult(index: int)
    generateHistogram(Collection<Trial>): Image
    generatePlot(Collection<Trial>): Image
}

' each trial has a unique QRCode associated with it
abstract class Trial {
    ' just going to user experimenter ID here
    -collector: Integer
    -QRcode: QRCode
    -location: Optional<Location>
}

class CountTrial extends Trial {
    ' essentially just a trial but it's own class since other types of trial aren't a count trial
}

' no unsigned ints in java, not sure how to enforce natural numbers only
class NaturalCountTrial extends Trial {
    -result: Integer
    +getResults(): Integer
}

' will likely specify true = pass, false = fail
class BinomialTrial extends Trial {
    -result: Boolean
    +getResults(): Boolean
}

class MeasurementTrial extends Trial {
    -result: Float
    +getResults(): Float
}

class QRCodeGenerator {
    ' implementation details unclear at the moment
    getQRCode(): QRCode
}

class QRCodeReader {
    ' implementation details unclear at the moment
    readQRCode(qr: QRCode)
}

class QRCode {
    ' somehow represent this?
    code: int
    isReadable: boolean
    ' a lot of QR codes use a check digit to determine if they are valid or not
    checkDigit(code): boolean
}

class Location {
  -latitude: int
  -longitude: int
}

class Map{
 -Collection<Location>
 generateMap(loc: Collection<Location): Image
}

Map -- "1..*" Location

interface "Histogram" as Histogram << Interface >> {
  generateHistogram(Collection<Trial>): Image
}

interface "Plot" as Plot <<Interface>> {
  generatePlot(Collection<Trial>): Image
}

' Modification: this is an interface that can be used by every experiment since it will calculate each value different depending on experiment type
' Note: ask if things like binomial trial should have these (median of pass/fail?)
Interface "StatSummary" as StatSummary <<Interface>> {
    +getMean(): Float
    +getMedian(): Float
    +getStdev(): Float
    +getFirstQuartile(): (Float, Float)
    +getSecondQuartile(): (Float, Float)
    +getThirdQuartile(): (Float, Float)
    +getFourthQuartile(): (Float, Float)
}

class ContactInformation {
    -name: String
    -email: Optional<String>
    -phone: Optional<String>
}

class SearchController {
    ' functionality here is searchbar functions required by Java so likely don't need to be specified in UML
    -keyword: String
    -searchKeyWord(keyword: String): Experiment
}

Experimenter "1" *-- "1" ContactInformation
Experimenter "1" *-- "0...*" Experiment

Subscription "0...*" o-- "0...*" Experimenter
Subscription "1" o-- "1" Experiment

Question "0...*" o-- "1" Experimenter
' Note: does each question get one reply? or does it turn into a thread?
Question "1" *-- "0...*" Reply

Reply "0...*" o-- "1" Experimenter

' Question: do we draw both aggregations since they are different and both are true?
Experiment "0...*" o-- "0...*" Experimenter

CountExperiment "1" *-- "0...*" CountTrial


NaturalCountExperiment "1" *-- "0...*" NaturalCountTrial

BinomialExperiment "1" *-- "0...*" BinomialTrial

MeasurementExperiment "1" *-- "0...*" MeasurementTrial

Trial "0...*" o-- "1" Experimenter
Trial "1" *-- "1" QRCode
Trial "1" *-- "1" Location

QRCodeGenerator --- QRCode
QRCodeReader --- QRCode

Experiment *-- "1" ExperimentType

class MeasurementExperiment implements StatSummary
class BinomialExperiment implements StatSummary
class NaturalCountExperiment implements StatSummary
class CountExperiment implements StatSummary

class MeasurementExperiment implements Histogram
class BinomialExperiment implements Histogram
class NaturalCountExperiment implements Histogram
class CountExperiment implements Histogram

class MeasurementExperiment implements Plot
class BinomialExperiment implements Plot
class NaturalCountExperiment implements Plot
class CountExperiment implements Plot


Experimenter "0..*" -- "1" SearchController


@enduml
