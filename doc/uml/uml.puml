@startuml UML
skinparam classAttributeIconSize 0

package users {
    ' generic class for an User
    ' note that experiments will likely be stored by user id instead of by all experiment info
    ' We could do hasing, but it's probably easier for now (for the UML sake) to represent this as a collection of experiments
    class User {
        -userId: UUID
        -info: ContactInformation
        -controller: SearchController
        -ownedExperiments: Collection<Experiment>
        -participatingExperiments: Collection<Experiment>
        #updateFirestore()
        #updateFromFirestore()
        +addGeoLocation(exp: Experiment): Location
        +seeGeoLocation(experiments: Collection<Experiment>): Map
        +subscribeExperiment(experimentId: UUID)
    }

    class ContactInformation {
        -name: String
        -email: String
        -phone: String
        -editable: Boolean
        -preferences: SharePreferences
    }

    class UserManager{
        -{static} currentUsers: HashMap<UUID, User>
        -{static} userManager: UserManager
        -testMode: Boolean
        +add(newUser: User)
        +getSize(): Integer
        +getSpecificUser(userID: UUID): User
        +getAllUsersFromFireStore()
        +sectorRead(snapshot: QuerySnapshot)
    }

    UserManager "1" *-- "1" UserManager: Singleton

    UserManager "0..1" o-- "0..*" User
}

package questions {
    class Question {
        -question: String
        -user: UUID
        -reply: UUID
        -experimentId: UUID
        -questionId: UUID
        +compareTo(o: Question): Integer
    }

    class QuestionManager {
        - {static} questions: HashMap<UUID, ArrayList<Question>>
        - {static} questionFromID: HashMap<UUID, Question>
        - {static} replies: hasMap<UUID, Reply>
        - {static} questionManager: QuestionManager

        + {static} getInstance(): QuestionManager
        + {static} resetInstance()
        + addQuestion(experimentID: UUID, question: Question)
        + addReply(id: UUID, reply: Reply)
        + getQuestion(questionId: UUID): Question
        + getTotalQuestions(experimentId: UUID): Integer
        + getQuestionReply(questionID: UUID): ArrayList<Reply>
        + getExperimentQuestions(experimentID: UUID): ArrayList<Question>
        + getAllQuestions(): Collection<ArrayList<Question>>
    }

    ' assume that anyone who can reply to a question is a type of User
    class Reply {
        -reply: String
        -experimenter: UUID
        -replyID: UUID
        + compareTo(o: Reply): Integer
    }
}

Question -- "1" User: Asks
Question "1" -- "0..*" Reply: Answers

Reply -- User: Answers

QuestionManager "1" *-- "1" QuestionManager: Singleton
QuestionManager "1" *-- "0..*" Question: addQuestion
QuestionManager "1" *-- "0..*" Reply: addReply

package experiments {
    ' allows the experiment to enforce only one trial type
    enum ExperimentType {
        Count
        NaturalCount
        Binomial
        Measurement
    }

    ' right now will just look for owner based on their id
    ' idea: make this 'experimentInfo' and give every type of experiment an experimentInfo instead
    ' rational: for displaying info and searching we don't need the results, just the info
    ' both are implemented so whichever we don't use can just be deleted
    abstract class Experiment<Trial> implements StatSummary, Graphable {
        -experimentId: UUID
        -description: String
        -minTrials: Integer
        #active: Boolean
        -published: Boolean
        -requireLocation: Boolean
        ' this is the userId of the owner
        -ownerId: UUID
        -type: ExperimentType
        -questions: ArrayList<Question>
        #results: Collection<Trial>
        +getSize(): Integer
        +makeNewUUID()
        +recordTrial(trial: Trial)
        +recordTrial(trial: Trial, fromFirestore: Boolean)
        +postExperimentToFirestore()
        +compareTo(o: Experiment): Integer
    }

    class ExperimentManager {
        - {static} experiments: HashMap<UUID, Experiment>
        - currentExperiment: Experiment
        - updateEvent: UpdateEvent

        + delete(id: UUID)
        + add(id: UUID, experiment: Experiment)
        + getOwnedExperiments(ownerID: UUID): ArrayList<Experiment> 
        + query(experimentID: UUID): Experiment
        + queryExperiments(query: String): ArrayList<Experiment> 
        + queryExperiments(experimentIds: Collection<UUID>): ArrayList<Experiment>
        + queryExperiments(query: String, experimentIds: Collection<UUID>): ArrayList<Experiment>
        + queryOwnedExperiments(query: String, ownerId: UUID): ArrayList<Experiment>
        + queryPublishedExperiments(query: String): ArrayList<Experiment>
        + getPublishedExperiments(): ArrayList<Experiment>
        + getAtUUIDDescription(experimentUUID: UUID): Experiment
        + getAllExperiments(): ArrayList<Experiment> 
        + getAllFromFirestore()
        + getExperiment(experimentID: UUID): Experiment
        - getFromFirestoreFromQuery(querySnapshotTask: Task<QuerySnapshot>)
        - updateFromDocumentSnapshot(document: DocumentSnapshot)
        - queryMatch(query: String, source: String): Boolean
        + {abstract} getRecordedTrials(): ArrayList<Trial>
    }

    class CountExperiment<CountTrial> extends Experiment {}

    class NaturalCountExperiment<NaturalCountTrial> extends Experiment {
        -getMedian(values: ArrayList<Integer>): Float
    }

    class BinomialExperiment<BinomialTrial> extends Experiment {
        -getMedian(values: ArrayList<Integer>): Float
    }

    class MeasurementExperiment<MeasurementTrial> extends Experiment {
        -getMedian(values: ArrayList<Integer>): Float

    }

    class ExperimentMaker {
        -{static} makeExperiment(ExperimentType type, String description, int minTrials, boolean requireLocation, boolean acceptNewResults, UUID ownerId): Experiment
        -{static} makeExperiment(ExperimentType type, String description, int minTrials, boolean requireLocation, boolean acceptNewResults, UUID ownerId, Boolean published, UUID experimentId): Experiment
    }

    interface "StatSummary" as StatSummary <<Interface>> {
        +getMean(): Float
        +getMedian(): Float
        +getStdev(): Float
        +getQuartile(): Float[]
    }

    interface "Graphable" as Graphable <<Interface>>> {
        +generateHistogram(): List<BarEntry>
        +generatePlot(): List<Entry>
    }

    ExperimentManager o-- "0..*" Experiment

    Experiment *-- "1" ExperimentType

    User "1" *-- "0...*" Experiment

    Question "0..*" --o "1" Experiment

    QuestionManager -- Experiment

    ExperimentManager o-- "1" UpdateEvent
}

package events {
    interface "OnEventListener" as OnEventListener <<Interface>> {
        + onEvent()
    }

    class UpdateEvent {
        - OnEventListener: OnEventListener
        + setOnEventListener(listener: OnEventListener)
        + callback()
    }
}

package trials {
    ' each trial has a unique QRCode associated with it
    abstract class Trial<T> {
        ' just going to user User ID here
        -collector: UUID
        -location: Location
        -date: Date
        -ignore: Boolean
        #result: T
    }

    class CountTrial<Object> extends Trial {
        ' essentially just a trial but it's own class since other types of trial aren't a count trial
    }

    ' no unsigned ints in java, not sure how to enforce natural numbers only
    class NaturalCountTrial<Integer> extends Trial

    ' will likely specify true = pass, false = fail
    class BinomialTrial<Boolean> extends Trial

    class MeasurementTrial<Float> extends Trial
}

package qr {

    class ExperimentQRCode<T> extends QRCode {}

    class BinomialQRCode extends QRCode{
        - result: Boolean
    }

    class CountQRCode extends QRCode{}

    class MeasurementQRCode extends QRCode{
        -value: float
    }

    class NaturalQRCode extends QRCode{
        -value: int
    }

    class QRMaker {
        +decodeQRString(String rawContent): QRCode
        +checkQRHeader(String qrString): Boolean
    }

    abstract class QRCode {
        - rawContentString: String
        - experimentID: UUID
        - type: QRType
        - qrCodeImage: Bitmap
        + encodeStringToQR(encodedContent: String): Bitmap
    }

    enum QRType {
        Experiment
        BinomialTrial
        CountTrial
        MeasurementTrial
        NaturalCountTrial
    }

    class QRMalformattedException

    QRType -- QRCode

    QRMaker "1" o-- "0..*" QRCode: decodeQRString

    QRMaker -- QRMalformattedException: Throws
}

package barcode{
    class BarcodeManager{
        -barcodes: HashMap<String,BarcodeReference>
        -barcodeManager: BarcodeManager
        +addBarCode(barcodeVal: String, experimentId: UUID, result: Integer, location: Location)
        +addBarCode(barcodeVal: String, experimentId: UUID, result: Float, location: Location)
        +addBarCode(barcodeVal: String, experimentId: UUID, result: Boolean, location: Location)
        +addBarCode(barcodeVal: String, experimentId: UUID,  location: Location)
        +getAllFromFireStore()
        +locationFromPairing(document: QueryDocumentSnapShot): Location
        +getBarcode(barcodeVal: String): BarcodeReference
    }

    BarcodeManager "1" *-- "1" BarcodeManager: Singleton

    BarcodeManager o-- "0..*" BarcodeReference


    abstract class BarcodeReference<T> {
        -barcodeVal: String
        -experimentID: UUID
        -type: ExperimentType
        -location: Location
        -T: result 
        +postBarcodeToFirestore()
    }

    class BinomialBarcodeReference<Boolean> extends BarcodeReference

    class CountBarcodeReference<Object> extends BarcodeReference

    class MeasurementBarcodeReference<Float> extends BarcodeReference

    class NaturalBarcodeReference<Integer> extends BarcodeReference
}

package location {
    class LocationServices {
        +currentLocation: Location
        +onLocationChanged() 
    }
}

class DataBase {
    -{static} current: DataBase
    -{static} db: FirebaseFirestore
    -testMode: Boolean

    +{static} getInstanceTesting(): DataBase
    +{static} getInstance(): DataBase
    +getFireStore(): FirebaseFirestore
}

DataBase "1" *-- "1" DataBase: Singleton

User "1" *-- "1" ContactInformation

CountExperiment "1" *-- "0...*" CountTrial

NaturalCountExperiment "1" *-- "0...*" NaturalCountTrial

BinomialExperiment "1" *-- "0...*" BinomialTrial

MeasurementExperiment "1" *-- "0...*" MeasurementTrial

User -- Trial: Performs

Experiment -- QRCode

BarcodeReference o-- Experiment

BarcodeReference o-- ExperimentType

@enduml
